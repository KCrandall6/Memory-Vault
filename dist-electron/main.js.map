{"version":3,"file":"main.js","sources":["../electron/db-test.ts","../electron/database.cjs","../electron/file-handler.js","../electron/main.ts"],"sourcesContent":["// electron/db-test.ts\r\nimport { app } from 'electron';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { fileURLToPath } from 'url';\r\n\r\n// ES module compatible dirname (replaces __dirname)\r\nconst currentFilePath = import.meta.url;\r\nconst currentDir = path.dirname(fileURLToPath(currentFilePath));\r\n\r\n// Simple function to test database connectivity\r\nexport async function testDatabase() {\r\n  try {\r\n    // Log environment details to help debug\r\n    console.log('Process cwd:', process.cwd());\r\n    console.log('Current directory:', currentDir);\r\n    \r\n    // Import better-sqlite3 dynamically\r\n    const SQLite3Module = await import('better-sqlite3');\r\n    const SQLite3 = SQLite3Module.default;\r\n    \r\n    // Define database path - try multiple approaches for reliability\r\n    // First approach: relative to cwd\r\n    // const dbPath = path.resolve(process.cwd(), '..', 'Database', 'memory-vault.db');\r\n    \r\n    // Second approach: more explicit path based on the file structure\r\n    const dbPath = path.resolve(currentDir, '..', '..', '..', 'Database', 'memory-vault.db');\r\n    \r\n    console.log(`Testing database at: ${dbPath}`);\r\n    \r\n    // Check if database file exists\r\n    try {\r\n      const stats = await fs.stat(dbPath);\r\n      console.log('Database file exists, size:', stats.size);\r\n    } catch (err) {\r\n      console.log('Database file does not exist, will create it');\r\n      \r\n      // Ensure directory exists\r\n      try {\r\n        await fs.mkdir(path.dirname(dbPath), { recursive: true });\r\n        console.log('Created database directory');\r\n      } catch (err) {\r\n        if (err.code !== 'EEXIST') {\r\n          console.error('Failed to create database directory:', err);\r\n          throw err;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Try to open the database\r\n    const db = new SQLite3(dbPath);\r\n    console.log('Database connection established successfully');\r\n    \r\n    // Enable foreign keys\r\n    db.pragma('foreign_keys = ON');\r\n    \r\n    // Test a simple query\r\n    try {\r\n      const result = db.prepare('SELECT COUNT(*) as count FROM sqlite_master').get();\r\n      console.log('Database query successful:', result);\r\n      \r\n      // Check if we need to create tables\r\n      if (result.count === 0) {\r\n        console.log('Database is empty, creating tables...');\r\n        try {\r\n          // Read SQL file\r\n          const sqlPath = path.resolve(currentDir, '..', '..', 'resources', 'create-database.sql');\r\n          console.log('Looking for SQL file at:', sqlPath);\r\n          \r\n          const sql = await fs.readFile(sqlPath, 'utf8');\r\n          console.log('SQL file loaded, length:', sql.length);\r\n          \r\n          // Execute SQL to create tables\r\n          db.exec(sql);\r\n          console.log('Database tables created successfully');\r\n        } catch (err) {\r\n          console.error('Failed to create database tables:', err);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Query failed:', err);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Database test failed:', error);\r\n    return false;\r\n  }\r\n}","// electron/database.cjs - Updated version\r\nconst { app } = require('electron');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst Database = require('better-sqlite3');\r\n\r\n// Initialize database connection\r\nlet db;\r\ntry {\r\n  // Get database path - adjust to use app data folder\r\n  const appDataPath = app.getPath('userData');\r\n  const dbDir = path.join(appDataPath, 'MemoryVault', 'Database');\r\n  const dbPath = path.join(dbDir, 'memory-vault.db');\r\n  \r\n  console.log(`Database path: ${dbPath}`);\r\n  \r\n  // Create database directory if it doesn't exist\r\n  if (!fs.existsSync(dbDir)) {\r\n    fs.mkdirSync(dbDir, { recursive: true });\r\n  }\r\n  \r\n  // Open database connection\r\n  db = new Database(dbPath);\r\n  db.pragma('foreign_keys = ON');\r\n  \r\n  // Initialize the database with required tables if they don't exist\r\n  const sqlPath = path.join(process.cwd(), 'resources', 'create-database.sql');\r\n  if (fs.existsSync(sqlPath)) {\r\n    const sqlScript = fs.readFileSync(sqlPath, 'utf8');\r\n    db.exec(sqlScript);\r\n    console.log('Database schema initialized');\r\n  }\r\n  \r\n  // Initialize with default values if tables are empty\r\n  initializeDefaultValues();\r\n  \r\n  console.log('Database connection established successfully');\r\n} catch (error) {\r\n  console.error('Error connecting to database:', error);\r\n  db = null;\r\n}\r\n\r\n// Initialize default values in lookup tables if they're empty\r\nfunction initializeDefaultValues() {\r\n  try {\r\n    if (!db) return;\r\n    \r\n    // Check and populate MediaTypes\r\n    const mediaTypesCount = db.prepare('SELECT COUNT(*) as count FROM MediaTypes').get().count;\r\n    if (mediaTypesCount === 0) {\r\n      const mediaTypes = [\r\n        'Image',\r\n        'Video',\r\n        'Document',\r\n        'Audio'\r\n      ];\r\n      \r\n      const insertStmt = db.prepare('INSERT INTO MediaTypes (name) VALUES (?)');\r\n      mediaTypes.forEach(name => insertStmt.run(name));\r\n      console.log('Initialized default media types');\r\n    }\r\n    \r\n    // Check and populate SourceTypes\r\n    const sourceTypesCount = db.prepare('SELECT COUNT(*) as count FROM SourceTypes').get().count;\r\n    if (sourceTypesCount === 0) {\r\n      const sourceTypes = [\r\n        'Digital Camera',\r\n        'Phone',\r\n        'Scanned Photo',\r\n        'Scanned Document',\r\n        'Internet',\r\n        'Other'\r\n      ];\r\n      \r\n      const insertStmt = db.prepare('INSERT INTO SourceTypes (name) VALUES (?)');\r\n      sourceTypes.forEach(name => insertStmt.run(name));\r\n      console.log('Initialized default source types');\r\n    }\r\n    \r\n    // Create a default collection if none exists\r\n    const collectionsCount = db.prepare('SELECT COUNT(*) as count FROM Collections').get().count;\r\n    if (collectionsCount === 0) {\r\n      db.prepare('INSERT INTO Collections (name, description) VALUES (?, ?)')\r\n        .run('General', 'Default collection for uncategorized media');\r\n      console.log('Created default collection');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error initializing default values:', error);\r\n  }\r\n}\r\n\r\n// Database operations\r\nfunction getAllMedia() {\r\n  try {\r\n    if (!db) return [];\r\n    \r\n    const stmt = db.prepare(`\r\n      SELECT m.*, mt.name as media_type, st.name as source_type, c.name as collection_name\r\n      FROM Media m\r\n      LEFT JOIN MediaTypes mt ON m.media_type_id = mt.id\r\n      LEFT JOIN SourceTypes st ON m.source_type_id = st.id\r\n      LEFT JOIN Collections c ON m.collection_id = c.id\r\n      ORDER BY m.created_at DESC\r\n    `);\r\n    return stmt.all();\r\n  } catch (error) {\r\n    console.error('Error getting all media:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Add media to the database\r\nfunction addMedia(mediaData) {\r\n  try {\r\n    if (!db) throw new Error('Database not initialized');\r\n    \r\n    const stmt = db.prepare(`\r\n      INSERT INTO Media (\r\n        file_name, file_path, thumbnail_path, title, description,\r\n        media_type_id, source_type_id, capture_date, location, collection_id\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `);\r\n    \r\n    const info = stmt.run(\r\n      mediaData.file_name,\r\n      mediaData.file_path,\r\n      mediaData.thumbnail_path,\r\n      mediaData.title,\r\n      mediaData.description,\r\n      mediaData.media_type_id,\r\n      mediaData.source_type_id,\r\n      mediaData.capture_date,\r\n      mediaData.location,\r\n      mediaData.collection_id\r\n    );\r\n    \r\n    return info.lastInsertRowid;\r\n  } catch (error) {\r\n    console.error('Error adding media:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Search media by various criteria\r\nfunction searchMedia(criteria) {\r\n  try {\r\n    if (!db) return [];\r\n    \r\n    let query = `\r\n      SELECT m.*, mt.name as media_type, st.name as source_type, c.name as collection_name\r\n      FROM Media m\r\n      LEFT JOIN MediaTypes mt ON m.media_type_id = mt.id\r\n      LEFT JOIN SourceTypes st ON m.source_type_id = st.id\r\n      LEFT JOIN Collections c ON m.collection_id = c.id\r\n      WHERE 1=1\r\n    `;\r\n    \r\n    const params = [];\r\n    \r\n    if (criteria.searchTerm) {\r\n      query += ` AND (\r\n        m.title LIKE ? OR\r\n        m.description LIKE ? OR\r\n        m.location LIKE ?\r\n      )`;\r\n      const searchTerm = `%${criteria.searchTerm}%`;\r\n      params.push(searchTerm, searchTerm, searchTerm);\r\n    }\r\n    \r\n    if (criteria.mediaTypeId) {\r\n      query += ` AND m.media_type_id = ?`;\r\n      params.push(criteria.mediaTypeId);\r\n    }\r\n    \r\n    if (criteria.sourceTypeId) {\r\n      query += ` AND m.source_type_id = ?`;\r\n      params.push(criteria.sourceTypeId);\r\n    }\r\n    \r\n    if (criteria.collectionId) {\r\n      query += ` AND m.collection_id = ?`;\r\n      params.push(criteria.collectionId);\r\n    }\r\n    \r\n    if (criteria.startDate) {\r\n      query += ` AND m.capture_date >= ?`;\r\n      params.push(criteria.startDate);\r\n    }\r\n    \r\n    if (criteria.endDate) {\r\n      query += ` AND m.capture_date <= ?`;\r\n      params.push(criteria.endDate);\r\n    }\r\n    \r\n    if (criteria.tagIds && criteria.tagIds.length > 0) {\r\n      const placeholders = criteria.tagIds.map(() => '?').join(',');\r\n      query += `\r\n        AND m.id IN (\r\n          SELECT media_id\r\n          FROM MediaTags\r\n          WHERE tag_id IN (${placeholders})\r\n          GROUP BY media_id\r\n          HAVING COUNT(DISTINCT tag_id) = ?\r\n        )\r\n      `;\r\n      params.push(...criteria.tagIds, criteria.tagIds.length);\r\n    }\r\n    \r\n    if (criteria.personIds && criteria.personIds.length > 0) {\r\n      const placeholders = criteria.personIds.map(() => '?').join(',');\r\n      query += `\r\n        AND m.id IN (\r\n          SELECT media_id\r\n          FROM MediaPeople\r\n          WHERE person_id IN (${placeholders})\r\n          GROUP BY media_id\r\n          HAVING COUNT(DISTINCT person_id) = ?\r\n        )\r\n      `;\r\n      params.push(...criteria.personIds, criteria.personIds.length);\r\n    }\r\n    \r\n    query += ` ORDER BY m.created_at DESC`;\r\n    \r\n    if (criteria.limit) {\r\n      query += ` LIMIT ?`;\r\n      params.push(criteria.limit);\r\n    }\r\n    \r\n    if (criteria.offset) {\r\n      query += ` OFFSET ?`;\r\n      params.push(criteria.offset);\r\n    }\r\n    \r\n    const stmt = db.prepare(query);\r\n    return stmt.all(...params);\r\n  } catch (error) {\r\n    console.error('Error searching media:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Get a single media record by ID\r\nfunction getMediaById(id) {\r\n  try {\r\n    if (!db) return null;\r\n    \r\n    const stmt = db.prepare(`\r\n      SELECT m.*, mt.name as media_type, st.name as source_type, c.name as collection_name\r\n      FROM Media m\r\n      LEFT JOIN MediaTypes mt ON m.media_type_id = mt.id\r\n      LEFT JOIN SourceTypes st ON m.source_type_id = st.id\r\n      LEFT JOIN Collections c ON m.collection_id = c.id\r\n      WHERE m.id = ?\r\n    `);\r\n    \r\n    return stmt.get(id);\r\n  } catch (error) {\r\n    console.error('Error getting media by ID:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Get media tags by media ID\r\nfunction getMediaTags(mediaId) {\r\n  try {\r\n    if (!db) return [];\r\n    \r\n    const stmt = db.prepare(`\r\n      SELECT t.*\r\n      FROM Tags t\r\n      JOIN MediaTags mt ON t.id = mt.tag_id\r\n      WHERE mt.media_id = ?\r\n      ORDER BY t.name\r\n    `);\r\n    \r\n    return stmt.all(mediaId);\r\n  } catch (error) {\r\n    console.error('Error getting media tags:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Get media people by media ID\r\nfunction getMediaPeople(mediaId) {\r\n  try {\r\n    if (!db) return [];\r\n    \r\n    const stmt = db.prepare(`\r\n      SELECT p.*\r\n      FROM People p\r\n      JOIN MediaPeople mp ON p.id = mp.person_id\r\n      WHERE mp.media_id = ?\r\n      ORDER BY p.name\r\n    `);\r\n    \r\n    return stmt.all(mediaId);\r\n  } catch (error) {\r\n    console.error('Error getting media people:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Get all media types\r\nfunction getMediaTypes() {\r\n  try {\r\n    if (!db) return [];\r\n    \r\n    const stmt = db.prepare('SELECT * FROM MediaTypes ORDER BY name');\r\n    return stmt.all();\r\n  } catch (error) {\r\n    console.error('Error getting media types:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Get all source types\r\nfunction getSourceTypes() {\r\n  try {\r\n    if (!db) return [];\r\n    \r\n    const stmt = db.prepare('SELECT * FROM SourceTypes ORDER BY name');\r\n    return stmt.all();\r\n  } catch (error) {\r\n    console.error('Error getting source types:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Get all collections\r\nfunction getCollections() {\r\n  try {\r\n    if (!db) return [];\r\n    \r\n    const stmt = db.prepare('SELECT * FROM Collections ORDER BY name');\r\n    return stmt.all();\r\n  } catch (error) {\r\n    console.error('Error getting collections:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Get all tags\r\nfunction getTags() {\r\n  try {\r\n    if (!db) return [];\r\n    \r\n    const stmt = db.prepare('SELECT * FROM Tags ORDER BY name');\r\n    return stmt.all();\r\n  } catch (error) {\r\n    console.error('Error getting tags:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Get all people\r\nfunction getPeople() {\r\n  try {\r\n    if (!db) return [];\r\n    \r\n    const stmt = db.prepare('SELECT * FROM People ORDER BY name');\r\n    return stmt.all();\r\n  } catch (error) {\r\n    console.error('Error getting people:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Add a tag (if it doesn't exist) and return its ID\r\nfunction addTag(name) {\r\n  try {\r\n    if (!db) throw new Error('Database not initialized');\r\n    \r\n    // Check if tag exists\r\n    const existingTag = db.prepare('SELECT id FROM Tags WHERE name = ?').get(name);\r\n    if (existingTag) {\r\n      return existingTag.id;\r\n    }\r\n    \r\n    // Create new tag\r\n    const stmt = db.prepare('INSERT INTO Tags (name) VALUES (?)');\r\n    const info = stmt.run(name);\r\n    return info.lastInsertRowid;\r\n  } catch (error) {\r\n    console.error('Error adding tag:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Add a person (if they don't exist) and return their ID\r\nfunction addPerson(name) {\r\n  try {\r\n    if (!db) throw new Error('Database not initialized');\r\n    \r\n    // Check if person exists\r\n    const existingPerson = db.prepare('SELECT id FROM People WHERE name = ?').get(name);\r\n    if (existingPerson) {\r\n      return existingPerson.id;\r\n    }\r\n    \r\n    // Create new person\r\n    const stmt = db.prepare('INSERT INTO People (name) VALUES (?)');\r\n    const info = stmt.run(name);\r\n    return info.lastInsertRowid;\r\n  } catch (error) {\r\n    console.error('Error adding person:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Link a tag to a media item\r\nfunction linkTagToMedia(mediaId, tagId) {\r\n  try {\r\n    if (!db) throw new Error('Database not initialized');\r\n    \r\n    const stmt = db.prepare('INSERT OR IGNORE INTO MediaTags (media_id, tag_id) VALUES (?, ?)');\r\n    stmt.run(mediaId, tagId);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error linking tag to media:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Link a person to a media item\r\nfunction linkPersonToMedia(mediaId, personId) {\r\n  try {\r\n    if (!db) throw new Error('Database not initialized');\r\n    \r\n    const stmt = db.prepare('INSERT OR IGNORE INTO MediaPeople (media_id, person_id) VALUES (?, ?)');\r\n    stmt.run(mediaId, personId);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error linking person to media:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Add a new collection\r\nfunction addCollection(name, description = '') {\r\n  try {\r\n    if (!db) throw new Error('Database not initialized');\r\n    \r\n    // Check if collection exists\r\n    const existingCollection = db.prepare('SELECT id FROM Collections WHERE name = ?').get(name);\r\n    if (existingCollection) {\r\n      return existingCollection.id;\r\n    }\r\n    \r\n    // Create new collection\r\n    const stmt = db.prepare('INSERT INTO Collections (name, description) VALUES (?, ?)');\r\n    const info = stmt.run(name, description);\r\n    return info.lastInsertRowid;\r\n  } catch (error) {\r\n    console.error('Error adding collection:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Update media record\r\nfunction updateMedia(id, mediaData) {\r\n  try {\r\n    if (!db) throw new Error('Database not initialized');\r\n    \r\n    const stmt = db.prepare(`\r\n      UPDATE Media SET\r\n        title = ?,\r\n        description = ?,\r\n        media_type_id = ?,\r\n        source_type_id = ?,\r\n        capture_date = ?,\r\n        location = ?,\r\n        collection_id = ?\r\n      WHERE id = ?\r\n    `);\r\n    \r\n    const info = stmt.run(\r\n      mediaData.title,\r\n      mediaData.description,\r\n      mediaData.media_type_id,\r\n      mediaData.source_type_id,\r\n      mediaData.capture_date,\r\n      mediaData.location,\r\n      mediaData.collection_id,\r\n      id\r\n    );\r\n    \r\n    return info.changes > 0;\r\n  } catch (error) {\r\n    console.error('Error updating media:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Delete media record\r\nfunction deleteMedia(id) {\r\n  try {\r\n    if (!db) throw new Error('Database not initialized');\r\n    \r\n    // Begin transaction\r\n    db.prepare('BEGIN TRANSACTION').run();\r\n    \r\n    try {\r\n      // Delete related tags\r\n      db.prepare('DELETE FROM MediaTags WHERE media_id = ?').run(id);\r\n      \r\n      // Delete related people\r\n      db.prepare('DELETE FROM MediaPeople WHERE media_id = ?').run(id);\r\n      \r\n      // Delete related comments\r\n      db.prepare('DELETE FROM Comments WHERE media_id = ?').run(id);\r\n      \r\n      // Delete the media record\r\n      const stmt = db.prepare('DELETE FROM Media WHERE id = ?');\r\n      const info = stmt.run(id);\r\n      \r\n      // Commit transaction\r\n      db.prepare('COMMIT').run();\r\n      \r\n      return info.changes > 0;\r\n    } catch (error) {\r\n      // Rollback transaction in case of error\r\n      db.prepare('ROLLBACK').run();\r\n      throw error;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting media:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  getAllMedia,\r\n  addMedia,\r\n  getMediaTypes,\r\n  getSourceTypes,\r\n  getCollections,\r\n  getTags,\r\n  getPeople,\r\n  addTag,\r\n  addPerson,\r\n  linkTagToMedia,\r\n  linkPersonToMedia\r\n};","// electron/file-handler.js - cleaned version\r\nimport { app } from 'electron';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { existsSync } from 'fs';\r\n\r\n// Define paths for media storage\r\nconst getAppDataPath = () => {\r\n  // Store files in the app's data directory\r\n  const appDataPath = path.join(app.getPath('userData'), 'MemoryVault');\r\n  return appDataPath;\r\n};\r\n\r\n// Create required directories\r\nasync function ensureDirectoriesExist() {\r\n  const mediaDir = path.join(getAppDataPath(), 'Media');\r\n  \r\n  try {\r\n    await fs.mkdir(mediaDir, { recursive: true });\r\n    return { mediaDir };\r\n  } catch (error) {\r\n    console.error('Error creating directories:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Generate a unique filename to avoid collisions\r\nfunction generateUniqueFilename(originalFilename) {\r\n  const timestamp = Date.now();\r\n  const randomString = Math.random().toString(36).substring(2, 8);\r\n  const ext = path.extname(originalFilename);\r\n  const name = path.basename(originalFilename, ext);\r\n  \r\n  return `${name}_${timestamp}_${randomString}${ext}`;\r\n}\r\n\r\n// Save a file to the media directory\r\nasync function saveMediaFile(sourcePath, filename) {\r\n  try {\r\n    const { mediaDir } = await ensureDirectoriesExist();\r\n    const uniqueFilename = generateUniqueFilename(filename);\r\n    const destinationPath = path.join(mediaDir, uniqueFilename);\r\n    \r\n    // Copy the file to the destination\r\n    await fs.copyFile(sourcePath, destinationPath);\r\n    \r\n    return {\r\n      filePath: destinationPath,\r\n      fileName: uniqueFilename,\r\n      relativePath: path.join('Media', uniqueFilename)\r\n    };\r\n  } catch (error) {\r\n    console.error('Error saving media file:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Process a media file - save without generating thumbnail\r\nasync function processMediaFile(filePath, fileName) {\r\n  try {\r\n    const fileInfo = await saveMediaFile(filePath, fileName);\r\n    \r\n    return {\r\n      ...fileInfo,\r\n      thumbnail: null // No thumbnail\r\n    };\r\n  } catch (error) {\r\n    console.error('Error processing media file:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport {\r\n  processMediaFile,\r\n  getAppDataPath,\r\n  ensureDirectoriesExist\r\n};","// electron/main.ts - cleaned version\r\nimport { app, BrowserWindow, ipcMain, dialog } from 'electron';\r\nimport { fileURLToPath } from 'url';\r\nimport path from 'path';\r\nimport fs from 'fs/promises';\r\nimport { testDatabase } from './db-test';\r\n\r\n// Import database operations - keep this as CommonJS import\r\n// @ts-ignore - ignore TypeScript error for using require with CommonJS module\r\nimport dbOperations from './database.cjs';\r\n\r\n\r\n// Import file handler as ES module\r\nimport { \r\n  processMediaFile,\r\n  ensureDirectoriesExist\r\n} from './file-handler.js';\r\n\r\n// ES module compatible dirname\r\nconst currentFilePath = import.meta.url;\r\nconst currentDir = path.dirname(fileURLToPath(currentFilePath));\r\n\r\n// Set up app paths\r\nprocess.env.APP_ROOT = path.join(currentDir, '..');\r\nexport const VITE_DEV_SERVER_URL = process.env['VITE_DEV_SERVER_URL'];\r\nexport const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron');\r\nexport const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist');\r\nprocess.env.VITE_PUBLIC = VITE_DEV_SERVER_URL ? path.join(process.env.APP_ROOT, 'public') : RENDERER_DIST;\r\n\r\n// Set up IPC handlers\r\nfunction setupIpcHandlers() {\r\n  // File selection handler\r\n  ipcMain.handle('select-files', async () => {\r\n    console.log('Showing file dialog...');\r\n    const { canceled, filePaths } = await dialog.showOpenDialog({\r\n      properties: ['openFile', 'multiSelections'],\r\n      filters: [\r\n        { name: 'Media Files', extensions: ['jpg', 'jpeg', 'png', 'gif', 'mp4', 'pdf', 'doc', 'docx'] }\r\n      ]\r\n    });\r\n    \r\n    if (canceled) {\r\n      return [];\r\n    }\r\n    \r\n    // Return basic file info\r\n    return Promise.all(filePaths.map(async (filePath) => {\r\n      const stats = await fs.stat(filePath);\r\n      return {\r\n        path: filePath,\r\n        name: path.basename(filePath),\r\n        size: stats.size,\r\n        type: path.extname(filePath).toLowerCase(),\r\n        lastModified: stats.mtime.getTime()\r\n      };\r\n    }));\r\n  });\r\n  \r\n  // File preview handler\r\n  ipcMain.handle('get-file-preview', async (_, filePath) => {\r\n    try {\r\n      console.log('Generating preview for:', filePath);\r\n      \r\n      // Read the file\r\n      const data = await fs.readFile(filePath);\r\n      \r\n      // Get file extension\r\n      const ext = path.extname(filePath).toLowerCase().substring(1);\r\n      \r\n      // Convert to base64\r\n      const base64 = data.toString('base64');\r\n      \r\n      // Create data URL\r\n      let mimeType = 'application/octet-stream';\r\n      if (['jpg', 'jpeg'].includes(ext)) mimeType = 'image/jpeg';\r\n      else if (ext === 'png') mimeType = 'image/png';\r\n      else if (ext === 'gif') mimeType = 'image/gif';\r\n      else if (ext === 'pdf') mimeType = 'application/pdf';\r\n      else if (ext === 'mp4') mimeType = 'video/mp4';\r\n      \r\n      console.log('Preview generated with mime type:', mimeType);\r\n      return {\r\n        dataUrl: `data:${mimeType};base64,${base64}`,\r\n        mimeType\r\n      };\r\n    } catch (error) {\r\n      console.error('Error reading file:', error);\r\n      return null;\r\n    }\r\n  });\r\n  \r\n  // Database query handlers\r\n  ipcMain.handle('get-media-types', async () => {\r\n    try {\r\n      const types = await dbOperations.getMediaTypes();\r\n      console.log('Media types from database:', types);\r\n      return types.length > 0 ? types : [\r\n        { id: 1, name: 'Image' },\r\n        { id: 2, name: 'Video' },\r\n        { id: 3, name: 'Document' },\r\n        { id: 4, name: 'Audio' }\r\n      ];\r\n    } catch (error) {\r\n      console.error('Error getting media types:', error);\r\n      return [\r\n        { id: 1, name: 'Image' },\r\n        { id: 2, name: 'Video' },\r\n        { id: 3, name: 'Document' },\r\n        { id: 4, name: 'Audio' }\r\n      ];\r\n    }\r\n  });\r\n  \r\n  ipcMain.handle('get-collections', async () => {\r\n    try {\r\n      return await dbOperations.getCollections();\r\n    } catch (error) {\r\n      console.error('Error getting collections:', error);\r\n      return [\r\n        { id: 1, name: 'Family Vacation 2023' },\r\n        { id: 2, name: 'Wedding Anniversary' },\r\n        { id: 3, name: 'Birthday Party' }\r\n      ];\r\n    }\r\n  });\r\n  \r\n  ipcMain.handle('get-tags', async () => {\r\n    try {\r\n      return await dbOperations.getTags();\r\n    } catch (error) {\r\n      console.error('Error getting tags:', error);\r\n      return [\r\n        { id: 1, name: 'family' },\r\n        { id: 2, name: 'vacation' },\r\n        { id: 3, name: 'birthday' }\r\n      ];\r\n    }\r\n  });\r\n  \r\n  ipcMain.handle('get-people', async () => {\r\n    try {\r\n      return await dbOperations.getPeople();\r\n    } catch (error) {\r\n      console.error('Error getting people:', error);\r\n      return [\r\n        { id: 1, name: 'John Smith' },\r\n        { id: 2, name: 'Jane Smith' },\r\n        { id: 3, name: 'Alex Johnson' }\r\n      ];\r\n    }\r\n  });\r\n  \r\n  // Save media handler\r\n  ipcMain.handle('save-media', async (_, data) => {\r\n    try {\r\n      console.log('Saving media:', data);\r\n      \r\n      // Process the file\r\n      const processedFile = await processMediaFile(data.filePath, path.basename(data.filePath));\r\n      \r\n      // Prepare media data for database\r\n      const mediaData = {\r\n        file_name: processedFile.fileName,\r\n        file_path: processedFile.relativePath,\r\n        thumbnail_path: null,\r\n        title: data.metadata.title,\r\n        description: data.metadata.description,\r\n        media_type_id: parseInt(data.metadata.mediaTypeId),\r\n        source_type_id: data.metadata.sourceTypeId ? parseInt(data.metadata.sourceTypeId) : null,\r\n        capture_date: data.metadata.captureDate || null,\r\n        location: data.metadata.location || null,\r\n        collection_id: data.metadata.collectionId ? parseInt(data.metadata.collectionId) : null\r\n      };\r\n      \r\n      // Save media record to database\r\n      const mediaId = await dbOperations.addMedia(mediaData);\r\n      console.log(`Media saved with ID: ${mediaId}`);\r\n      \r\n      // Process tags\r\n      if (data.metadata.tags && data.metadata.tags.length > 0) {\r\n        for (const tag of data.metadata.tags) {\r\n          // If tag has negative ID, it's a new tag\r\n          const tagId = tag.id < 0 \r\n            ? await dbOperations.addTag(tag.name)\r\n            : tag.id;\r\n          \r\n          await dbOperations.linkTagToMedia(mediaId, tagId);\r\n        }\r\n      }\r\n      \r\n      // Process people\r\n      if (data.metadata.people && data.metadata.people.length > 0) {\r\n        for (const person of data.metadata.people) {\r\n          // If person has negative ID, it's a new person\r\n          const personId = person.id < 0 \r\n            ? await dbOperations.addPerson(person.name)\r\n            : person.id;\r\n          \r\n          await dbOperations.linkPersonToMedia(mediaId, personId);\r\n        }\r\n      }\r\n      \r\n      return { success: true, mediaId };\r\n    } catch (error) {\r\n      console.error('Error saving media:', error);\r\n      return { \r\n        success: false, \r\n        error: error instanceof Error ? error.message : 'Unknown error occurred' \r\n      };\r\n    }\r\n  });\r\n}\r\n\r\n// Window management\r\nlet win: BrowserWindow | null;\r\n\r\nfunction createWindow() {\r\n  win = new BrowserWindow({\r\n    icon: path.join(process.env.VITE_PUBLIC, 'electron-vite.svg'),\r\n    webPreferences: {\r\n      preload: path.join(currentDir, 'preload.js'),\r\n      contextIsolation: true,\r\n      nodeIntegration: false\r\n    },\r\n    width: 1200,\r\n    height: 800,\r\n  });\r\n\r\n  // Open DevTools for debugging\r\n  if (VITE_DEV_SERVER_URL) {\r\n    win.webContents.openDevTools();\r\n  }\r\n\r\n  win.webContents.on('did-finish-load', () => {\r\n    win?.webContents.send('main-process-message', (new Date).toLocaleString());\r\n  });\r\n\r\n  if (VITE_DEV_SERVER_URL) {\r\n    win.loadURL(VITE_DEV_SERVER_URL);\r\n  } else {\r\n    win.loadFile(path.join(RENDERER_DIST, 'index.html'));\r\n  }\r\n}\r\n\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') {\r\n    app.quit();\r\n    win = null;\r\n  }\r\n});\r\n\r\napp.on('activate', () => {\r\n  if (BrowserWindow.getAllWindows().length === 0) {\r\n    createWindow();\r\n  }\r\n});\r\n\r\n// App initialization\r\napp.whenReady().then(async () => {\r\n  try {\r\n    // Initialize database\r\n    const dbTestResult = await testDatabase();\r\n    console.log('Database test result:', dbTestResult);\r\n    \r\n    // Create necessary directories\r\n    await ensureDirectoriesExist();\r\n    \r\n    setupIpcHandlers();\r\n    createWindow();\r\n    \r\n    console.log('App initialized successfully');\r\n  } catch (error) {\r\n    console.error('Error during app initialization:', error);\r\n  }\r\n});"],"names":["currentFilePath","currentDir","path","fs","err","db","require$$1","app"],"mappings":"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"}